#!/bin/bash
set -euo pipefail
here=$(dirname "${BASH_SOURCE[0]}")
here=$(readlink -f "$here")

if [ $# -lt 2 ]; then
  echo >&2 "usage: $0 outputdir buildscript [input ...]"
  exit 1
fi
out=$(readlink -f "$1")
shift
script_dir=$(readlink -f "$1")
package_name=$(basename "$script_dir")
shift
inputs=("$@")

if [ -e "$out"/.built ]; then
  shouldBuild=no
  newer=$(find "$script_dir" -newer "$out"/.built -print -quit)
  if [ -n "$newer" ]; then
    echo >&2 "$0: should build: $newer is newer than $out"
    shouldBuild=yes
  elif [ -v inputs ]; then
    for i in "${inputs[@]}"; do
      if [ "$i"/.built -nt "$out"/.built ]; then
        echo >&2 "$0: should build: $i is newer than $out"
        shouldBuild=yes
        break
      fi
    done
  fi
else
  echo >&2 "$0: should build: $out has not been built"
  shouldBuild=yes
fi

cleanup() {
  if [ -v LEAVE_WORKING_DIR ]; then
    echo >&2 "$1"
  else
    find "$1" -type d -execdir chmod u+w {} +
    rm -rf "$1"
  fi
}

bppm_escape() {
  sed -e 's,%,%#,g' -e 's,=,%+,g' -e 's,:,%.,g'
}

bppm() {
  local bppm
  bppm=
  while [ $# -gt 0 ]; do
    a=$(bppm_escape <<< "$1")
    b=$(bppm_escape <<< "$2")
    bppm="$bppm:$a=$b"
    shift 2
  done
  echo "${bppm#:}"
}

case "$shouldBuild" in
  yes)
    echo >&2 "$0: building: $out"
    unset workdir
    trap 'if [ -v workdir ]; then cleanup "$workdir"; fi' EXIT
    workdir=$(mktemp -d --tmpdir "$package_name".XXXXXXXX)
    if [ -d "$out" ]; then
      find "$out" -type d -execdir chmod u+w {} +
    fi
    rm -rf "$out"
    (
      inputsvars=()
      bppmentries=("/egg-workdir/$package_name" "$workdir")
      if [ -v inputs ]; then
        inputspaths=()
        for i in "${inputs[@]}"; do
          name=$(basename "$i")
          fullpath=$(readlink -f "$i")
          inputspaths+=("$fullpath")
          inputsvars+=("${name//-/_}=$fullpath")
          bppmentries+=(/egg-input/"$name" "$fullpath")
        done
        IFS=:
        if [ -v PASS_PATH_THROUGH ] && [ -v inputspaths ]; then
          path=$PATH:"${inputspaths[*]/%//bin}"
        elif [ -v PASS_PATH_THROUGH ]; then
          path=$PATH
        elif [ -v inputspaths ]; then
          path="${inputspaths[*]/%//bin}"
        else
          path=
        fi
        inputsvars+=(
          CPATH="${inputspaths[*]/%//include}"
          LD_LIBRARY_PATH="${inputspaths[*]/%//lib}"
          LIBRARY_PATH="${inputspaths[*]/%//lib}"
          PATH="$path"
        )
        unset IFS
      fi
      pathmap=$(bppm "${bppmentries[@]}")
      cd "$workdir"
      env -i \
        out="$out" \
        here="$script_dir" \
        SOURCE_DATE_EPOCH=1 \
        BUILD_PATH_PREFIX_MAP="$pathmap" \
        ${inputsvars:+"${inputsvars[@]}"} \
        /bin/bash -euo pipefail -- "$script_dir"/build
    )
    chmod u+w "$out"
    touch "$out"/.built
    find "$out" ! -type l -execdir chmod a-w {} +
    ;;
  no)
    echo >&2 "$0: not building: $out"
    exit 0
    ;;
  *)
    echo >&2 "$0: internal error: $shouldBuild"
    exit 2
    ;;
esac
